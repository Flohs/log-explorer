language: php
php:
    - 7.3
os: linux
dist: bionic
sudo: true

services:
    - mysql

cache:
    directories:
        - $HOME/.composer/cache
        - bin/.phpunit

stages:
    - name: test
      if: branch = master
    - name: versioning
      if: branch = master AND commit_message != "versioning"
    - name: release
      if: tag IS NOT blank

jobs:
    include:
        - stage: test
          before_install:
              - cp .env.dist .env.test.local
              - sed -i 's/APP_ENV=dev/APP_ENV=test/' .env.test.local
              - sed -i 's/MYSQL_URL=mysql:\/\/dev:dev@mysql:3306\/dev/MYSQL_URL=mysql:\/\/root@127.0.0.1\/test/' .env.test.local
              - sed -i 's/DATABASE_HOST=db/DATABASE_HOST=127.0.0.1/' .env.test.local
              - sed -i 's/DATABASE_DBNAME=logs/DATABASE_DBNAME=default/' .env.test.local
              - cp .env.test.local .env
              - mysql -e 'CREATE DATABASE IF NOT EXISTS test;'
              - sudo apt-get update -y
              - sudo apt -y install apt-transport-https ca-certificates dirmngr
              - sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv E0C56BD4
              - echo "deb https://repo.clickhouse.tech/deb/stable/ main/" | sudo tee /etc/apt/sources.list.d/clickhouse.list
              - sudo apt-get update -y
              - sudo apt-get install -y clickhouse-server clickhouse-client
              - sudo service clickhouse-server start
              - nvm install 14
          before_script:
              - composer self-update
              - composer install --no-scripts --no-interaction --prefer-dist --optimize-autoloader
              - php bin/console doctrine:migrations:migrate --no-interaction --env=test
              - php bin/console doctrine:fixtures:load -e test -n
              - npm install
              - npm run dev
              - php bin/console doctrine:fixtures:load -n --env="test"
              - php bin/console app:deletesampledatabase --env="test"
              - php bin/console app:createsampledatabase --env="test"
              - php bin/console app:createsampledata 300 --env="test"
          script:
              - ./bin/phpunit --coverage-text
        - stage: versioning
          before_install:
              - nvm install 14
          script: skip
          before_deploy:
              - version=`grep -oP "app.version:\ '(.*)'" config/services.yaml | grep -oP "'(.*)'" | cut -d "'" -f 2`
              - IFS='.' read -r -a array <<< "$version"
              - new_version=${array[0]}.${array[1]}.$((array[2] + 1))
              - sed -i -E "s/app.version:(\s+)'(.*)'/app.version:\ '$new_version'/g" config/services.yaml
              - echo "update master version to $new_version"
              - npm install
              - npm run build
          deploy:
              provider: pages:git
              token: $deploy_key
              edge: true
              target_branch: master
              commit_message: "versioning"
              on:
                  branch: master
                  condition: commit_message != "versioning"
        - stage: release
          before_install:
              - nvm install 14
          install:
              - git clone "https://$deploy_key@github.com/$TRAVIS_REPO_SLUG.git" $TRAVIS_REPO_SLUG
              - cd $TRAVIS_REPO_SLUG
          before_script:
              - VERSION=`grep -oP "app.version:\ '(.*)'" config/services.yaml | grep -oP "'(.*)'" | cut -d "'" -f 2`
              - echo "config current version is $VERSION"
          script: skip
          deploy:
              provider: script
              script: >-
                sed -i -E "s/app.version:(\s+)'(.*)'/app.version:\ '$TRAVIS_TAG'/g" config/services.yaml &&
                git commit -am "versioning" &&
                git push origin master &&
                echo "DONE: update master version to $TRAVIS_TAG" &&
                git checkout "$TRAVIS_TAG" -b "$TRAVIS_TAG" &&
                git tag -d "$TRAVIS_TAG" &&
                sed -i -E "s/app.version:(\s+)'(.*)'/app.version:\ '$TRAVIS_TAG'/g" config/services.yaml &&
                npm install &&
                npm run build &&
                git add -A . &&
                git commit -am "versioning" &&
                git tag -f "$TRAVIS_TAG" &&
                git push origin -f --tags &&
                echo "DONE: replace tag to version $TRAVIS_TAG"
              on:
                  tags: true
                  condition: $VERSION != $TRAVIS_TAG
