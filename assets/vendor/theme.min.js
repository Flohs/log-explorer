(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function sortTableByColumn(table, column) {
  var asc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var dirModifier = asc ? 1 : -1;
  var tBody = table.tBodies[0];
  var rows = Array.from(tBody.querySelectorAll("tr")); // sort each row

  var sortedRows = rows.sort(function (a, b) {
    var aColText = a.querySelector("td:nth-child(".concat(column + 1, ")")).textContent.trim();
    var bColText = b.querySelector("td:nth-child(".concat(column + 1, ")")).textContent.trim();
    return aColText > bColText ? 1 * dirModifier : -1 * dirModifier;
  }); // Remove all existing TRs from the table

  while (tBody.firstChild) {
    tBody.removeChild(tBody.firstChild);
  } // Re-add the newly sorted rows


  tBody.append.apply(tBody, _toConsumableArray(sortedRows)); // Remember how the column is currently sorted

  table.querySelectorAll("th.col-sortable").forEach(function (th) {
    return th.classList.remove("th-sort-asc", "th-sort-desc");
  });
  table.querySelector("th.col-sortable:nth-child(".concat(column + 1, ")")).classList.toggle("th-sort-asc", asc);
  table.querySelector("th.col-sortable:nth-child(".concat(column + 1, ")")).classList.toggle("th-sort-desc", !asc);
}

document.querySelectorAll(".table-sortable th.col-sortable").forEach(function (headerCell) {
  headerCell.addEventListener("click", function () {
    var tableElement = headerCell.parentElement.parentElement.parentElement;
    var headerIndex = Array.prototype.indexOf.call(headerCell.parentElement.children, headerCell);
    var currentIsAscending = headerCell.classList.contains("th-sort-asc");
    sortTableByColumn(tableElement, headerIndex, !currentIsAscending);
  });
});
$(document).ready(function () {
  $('#sidebarCollapse').on('click', function () {
    $('#sidebar').toggleClass('hidden');
    $('#sidebarCollapse').toggleClass('sidebar-hidden');
  });
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvdGhlbWVzL2pzL3RoZW1lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUNBQSxTQUFTLGlCQUFULENBQTJCLEtBQTNCLEVBQWtDLE1BQWxDLEVBQXNEO0FBQUEsTUFBWixHQUFZLHVFQUFOLElBQU07QUFDbEQsTUFBTSxXQUFXLEdBQUcsR0FBRyxHQUFHLENBQUgsR0FBTyxDQUFDLENBQS9CO0FBQ0EsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU4sQ0FBYyxDQUFkLENBQWQ7QUFDQSxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsSUFBTixDQUFXLEtBQUssQ0FBQyxnQkFBTixDQUF1QixJQUF2QixDQUFYLENBQWIsQ0FIa0QsQ0FLbEQ7O0FBQ0EsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUwsQ0FBVSxVQUFDLENBQUQsRUFBSSxDQUFKLEVBQVU7QUFDbkMsUUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFDLGFBQUYsd0JBQWdDLE1BQU0sR0FBRyxDQUF6QyxRQUErQyxXQUEvQyxDQUEyRCxJQUEzRCxFQUFqQjtBQUNBLFFBQU0sUUFBUSxHQUFHLENBQUMsQ0FBQyxhQUFGLHdCQUFnQyxNQUFNLEdBQUcsQ0FBekMsUUFBK0MsV0FBL0MsQ0FBMkQsSUFBM0QsRUFBakI7QUFFQSxXQUFPLFFBQVEsR0FBRyxRQUFYLEdBQXVCLElBQUksV0FBM0IsR0FBMkMsQ0FBQyxDQUFELEdBQUssV0FBdkQ7QUFDSCxHQUxrQixDQUFuQixDQU5rRCxDQWFsRDs7QUFDQSxTQUFPLEtBQUssQ0FBQyxVQUFiLEVBQXlCO0FBQ3JCLElBQUEsS0FBSyxDQUFDLFdBQU4sQ0FBa0IsS0FBSyxDQUFDLFVBQXhCO0FBQ0gsR0FoQmlELENBa0JsRDs7O0FBQ0EsRUFBQSxLQUFLLENBQUMsTUFBTixPQUFBLEtBQUsscUJBQVcsVUFBWCxFQUFMLENBbkJrRCxDQXFCbEQ7O0FBQ0EsRUFBQSxLQUFLLENBQUMsZ0JBQU4sQ0FBdUIsaUJBQXZCLEVBQTBDLE9BQTFDLENBQWtELFVBQUEsRUFBRTtBQUFBLFdBQUksRUFBRSxDQUFDLFNBQUgsQ0FBYSxNQUFiLENBQW9CLGFBQXBCLEVBQW1DLGNBQW5DLENBQUo7QUFBQSxHQUFwRDtBQUNBLEVBQUEsS0FBSyxDQUFDLGFBQU4scUNBQWtELE1BQU0sR0FBRyxDQUEzRCxRQUFpRSxTQUFqRSxDQUEyRSxNQUEzRSxDQUFrRixhQUFsRixFQUFpRyxHQUFqRztBQUNBLEVBQUEsS0FBSyxDQUFDLGFBQU4scUNBQWtELE1BQU0sR0FBRyxDQUEzRCxRQUFpRSxTQUFqRSxDQUEyRSxNQUEzRSxDQUFrRixjQUFsRixFQUFrRyxDQUFDLEdBQW5HO0FBRUg7O0FBRUQsUUFBUSxDQUFDLGdCQUFULENBQTBCLGlDQUExQixFQUE2RCxPQUE3RCxDQUFxRSxVQUFBLFVBQVUsRUFBSTtBQUMvRSxFQUFBLFVBQVUsQ0FBQyxnQkFBWCxDQUE0QixPQUE1QixFQUFxQyxZQUFNO0FBQ3ZDLFFBQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxhQUFYLENBQXlCLGFBQXpCLENBQXVDLGFBQTVEO0FBQ0EsUUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLFNBQU4sQ0FBZ0IsT0FBaEIsQ0FBd0IsSUFBeEIsQ0FBNkIsVUFBVSxDQUFDLGFBQVgsQ0FBeUIsUUFBdEQsRUFBZ0UsVUFBaEUsQ0FBcEI7QUFDQSxRQUFNLGtCQUFrQixHQUFHLFVBQVUsQ0FBQyxTQUFYLENBQXFCLFFBQXJCLENBQThCLGFBQTlCLENBQTNCO0FBRUEsSUFBQSxpQkFBaUIsQ0FBQyxZQUFELEVBQWUsV0FBZixFQUE0QixDQUFDLGtCQUE3QixDQUFqQjtBQUNILEdBTkQ7QUFPSCxDQVJEO0FBVUEsQ0FBQyxDQUFDLFFBQUQsQ0FBRCxDQUFZLEtBQVosQ0FBa0IsWUFBVztBQUN6QixFQUFBLENBQUMsQ0FBQyxrQkFBRCxDQUFELENBQXNCLEVBQXRCLENBQXlCLE9BQXpCLEVBQWtDLFlBQVc7QUFDekMsSUFBQSxDQUFDLENBQUMsVUFBRCxDQUFELENBQWMsV0FBZCxDQUEwQixRQUExQjtBQUNBLElBQUEsQ0FBQyxDQUFDLGtCQUFELENBQUQsQ0FBc0IsV0FBdEIsQ0FBa0MsZ0JBQWxDO0FBQ0gsR0FIRDtBQUlILENBTEQiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJmdW5jdGlvbiBzb3J0VGFibGVCeUNvbHVtbih0YWJsZSwgY29sdW1uLCBhc2MgPSB0cnVlKSB7XG4gICAgY29uc3QgZGlyTW9kaWZpZXIgPSBhc2MgPyAxIDogLTE7XG4gICAgY29uc3QgdEJvZHkgPSB0YWJsZS50Qm9kaWVzWzBdO1xuICAgIGNvbnN0IHJvd3MgPSBBcnJheS5mcm9tKHRCb2R5LnF1ZXJ5U2VsZWN0b3JBbGwoXCJ0clwiKSk7XG5cbiAgICAvLyBzb3J0IGVhY2ggcm93XG4gICAgY29uc3Qgc29ydGVkUm93cyA9IHJvd3Muc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBjb25zdCBhQ29sVGV4dCA9IGEucXVlcnlTZWxlY3RvcihgdGQ6bnRoLWNoaWxkKCR7Y29sdW1uICsgMX0pYCkudGV4dENvbnRlbnQudHJpbSgpO1xuICAgICAgICBjb25zdCBiQ29sVGV4dCA9IGIucXVlcnlTZWxlY3RvcihgdGQ6bnRoLWNoaWxkKCR7Y29sdW1uICsgMX0pYCkudGV4dENvbnRlbnQudHJpbSgpO1xuXG4gICAgICAgIHJldHVybiBhQ29sVGV4dCA+IGJDb2xUZXh0ID8gKDEgKiBkaXJNb2RpZmllcikgOiAoLTEgKiBkaXJNb2RpZmllcik7XG4gICAgfSk7XG5cbiAgICAvLyBSZW1vdmUgYWxsIGV4aXN0aW5nIFRScyBmcm9tIHRoZSB0YWJsZVxuICAgIHdoaWxlICh0Qm9keS5maXJzdENoaWxkKSB7XG4gICAgICAgIHRCb2R5LnJlbW92ZUNoaWxkKHRCb2R5LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIC8vIFJlLWFkZCB0aGUgbmV3bHkgc29ydGVkIHJvd3NcbiAgICB0Qm9keS5hcHBlbmQoLi4uc29ydGVkUm93cyk7XG5cbiAgICAvLyBSZW1lbWJlciBob3cgdGhlIGNvbHVtbiBpcyBjdXJyZW50bHkgc29ydGVkXG4gICAgdGFibGUucXVlcnlTZWxlY3RvckFsbChcInRoLmNvbC1zb3J0YWJsZVwiKS5mb3JFYWNoKHRoID0+IHRoLmNsYXNzTGlzdC5yZW1vdmUoXCJ0aC1zb3J0LWFzY1wiLCBcInRoLXNvcnQtZGVzY1wiKSk7XG4gICAgdGFibGUucXVlcnlTZWxlY3RvcihgdGguY29sLXNvcnRhYmxlOm50aC1jaGlsZCgkeyBjb2x1bW4gKyAxfSlgKS5jbGFzc0xpc3QudG9nZ2xlKFwidGgtc29ydC1hc2NcIiwgYXNjKTtcbiAgICB0YWJsZS5xdWVyeVNlbGVjdG9yKGB0aC5jb2wtc29ydGFibGU6bnRoLWNoaWxkKCR7IGNvbHVtbiArIDF9KWApLmNsYXNzTGlzdC50b2dnbGUoXCJ0aC1zb3J0LWRlc2NcIiwgIWFzYyk7XG5cbn1cblxuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi50YWJsZS1zb3J0YWJsZSB0aC5jb2wtc29ydGFibGVcIikuZm9yRWFjaChoZWFkZXJDZWxsID0+IHtcbiAgICBoZWFkZXJDZWxsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYmxlRWxlbWVudCA9IGhlYWRlckNlbGwucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IGhlYWRlckluZGV4ID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChoZWFkZXJDZWxsLnBhcmVudEVsZW1lbnQuY2hpbGRyZW4sIGhlYWRlckNlbGwpO1xuICAgICAgICBjb25zdCBjdXJyZW50SXNBc2NlbmRpbmcgPSBoZWFkZXJDZWxsLmNsYXNzTGlzdC5jb250YWlucyhcInRoLXNvcnQtYXNjXCIpO1xuXG4gICAgICAgIHNvcnRUYWJsZUJ5Q29sdW1uKHRhYmxlRWxlbWVudCwgaGVhZGVySW5kZXgsICFjdXJyZW50SXNBc2NlbmRpbmcpO1xuICAgIH0pO1xufSk7XG5cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuICAgICQoJyNzaWRlYmFyQ29sbGFwc2UnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgJCgnI3NpZGViYXInKS50b2dnbGVDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICQoJyNzaWRlYmFyQ29sbGFwc2UnKS50b2dnbGVDbGFzcygnc2lkZWJhci1oaWRkZW4nKTtcbiAgICB9KTtcbn0pOyJdfQ==
